/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dj.model.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SmallConsumerObjectAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6194621510763073044L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SmallConsumerObjectAvro\",\"namespace\":\"com.dj.model.avro\",\"fields\":[{\"name\":\"myvar1\",\"type\":[\"null\",\"int\"],\"aliases\":[\"var1\"]},{\"name\":\"myvar2\",\"type\":[\"null\",\"boolean\"],\"aliases\":[\"var2\"]},{\"name\":\"myvar3\",\"type\":[\"null\",\"double\"],\"aliases\":[\"var3\"]}],\"aliases\":[\"LargeObjectAvro\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SmallConsumerObjectAvro> ENCODER =
      new BinaryMessageEncoder<SmallConsumerObjectAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SmallConsumerObjectAvro> DECODER =
      new BinaryMessageDecoder<SmallConsumerObjectAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SmallConsumerObjectAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SmallConsumerObjectAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SmallConsumerObjectAvro>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SmallConsumerObjectAvro to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SmallConsumerObjectAvro from a ByteBuffer. */
  public static SmallConsumerObjectAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Integer myvar1;
   private java.lang.Boolean myvar2;
   private java.lang.Double myvar3;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SmallConsumerObjectAvro() {}

  /**
   * All-args constructor.
   * @param myvar1 The new value for myvar1
   * @param myvar2 The new value for myvar2
   * @param myvar3 The new value for myvar3
   */
  public SmallConsumerObjectAvro(java.lang.Integer myvar1, java.lang.Boolean myvar2, java.lang.Double myvar3) {
    this.myvar1 = myvar1;
    this.myvar2 = myvar2;
    this.myvar3 = myvar3;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return myvar1;
    case 1: return myvar2;
    case 2: return myvar3;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: myvar1 = (java.lang.Integer)value$; break;
    case 1: myvar2 = (java.lang.Boolean)value$; break;
    case 2: myvar3 = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'myvar1' field.
   * @return The value of the 'myvar1' field.
   */
  public java.lang.Integer getMyvar1() {
    return myvar1;
  }

  /**
   * Sets the value of the 'myvar1' field.
   * @param value the value to set.
   */
  public void setMyvar1(java.lang.Integer value) {
    this.myvar1 = value;
  }

  /**
   * Gets the value of the 'myvar2' field.
   * @return The value of the 'myvar2' field.
   */
  public java.lang.Boolean getMyvar2() {
    return myvar2;
  }

  /**
   * Sets the value of the 'myvar2' field.
   * @param value the value to set.
   */
  public void setMyvar2(java.lang.Boolean value) {
    this.myvar2 = value;
  }

  /**
   * Gets the value of the 'myvar3' field.
   * @return The value of the 'myvar3' field.
   */
  public java.lang.Double getMyvar3() {
    return myvar3;
  }

  /**
   * Sets the value of the 'myvar3' field.
   * @param value the value to set.
   */
  public void setMyvar3(java.lang.Double value) {
    this.myvar3 = value;
  }

  /**
   * Creates a new SmallConsumerObjectAvro RecordBuilder.
   * @return A new SmallConsumerObjectAvro RecordBuilder
   */
  public static com.dj.model.avro.SmallConsumerObjectAvro.Builder newBuilder() {
    return new com.dj.model.avro.SmallConsumerObjectAvro.Builder();
  }

  /**
   * Creates a new SmallConsumerObjectAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SmallConsumerObjectAvro RecordBuilder
   */
  public static com.dj.model.avro.SmallConsumerObjectAvro.Builder newBuilder(com.dj.model.avro.SmallConsumerObjectAvro.Builder other) {
    return new com.dj.model.avro.SmallConsumerObjectAvro.Builder(other);
  }

  /**
   * Creates a new SmallConsumerObjectAvro RecordBuilder by copying an existing SmallConsumerObjectAvro instance.
   * @param other The existing instance to copy.
   * @return A new SmallConsumerObjectAvro RecordBuilder
   */
  public static com.dj.model.avro.SmallConsumerObjectAvro.Builder newBuilder(com.dj.model.avro.SmallConsumerObjectAvro other) {
    return new com.dj.model.avro.SmallConsumerObjectAvro.Builder(other);
  }

  /**
   * RecordBuilder for SmallConsumerObjectAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SmallConsumerObjectAvro>
    implements org.apache.avro.data.RecordBuilder<SmallConsumerObjectAvro> {

    private java.lang.Integer myvar1;
    private java.lang.Boolean myvar2;
    private java.lang.Double myvar3;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dj.model.avro.SmallConsumerObjectAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.myvar1)) {
        this.myvar1 = data().deepCopy(fields()[0].schema(), other.myvar1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.myvar2)) {
        this.myvar2 = data().deepCopy(fields()[1].schema(), other.myvar2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.myvar3)) {
        this.myvar3 = data().deepCopy(fields()[2].schema(), other.myvar3);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SmallConsumerObjectAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dj.model.avro.SmallConsumerObjectAvro other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.myvar1)) {
        this.myvar1 = data().deepCopy(fields()[0].schema(), other.myvar1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.myvar2)) {
        this.myvar2 = data().deepCopy(fields()[1].schema(), other.myvar2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.myvar3)) {
        this.myvar3 = data().deepCopy(fields()[2].schema(), other.myvar3);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'myvar1' field.
      * @return The value.
      */
    public java.lang.Integer getMyvar1() {
      return myvar1;
    }

    /**
      * Sets the value of the 'myvar1' field.
      * @param value The value of 'myvar1'.
      * @return This builder.
      */
    public com.dj.model.avro.SmallConsumerObjectAvro.Builder setMyvar1(java.lang.Integer value) {
      validate(fields()[0], value);
      this.myvar1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'myvar1' field has been set.
      * @return True if the 'myvar1' field has been set, false otherwise.
      */
    public boolean hasMyvar1() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'myvar1' field.
      * @return This builder.
      */
    public com.dj.model.avro.SmallConsumerObjectAvro.Builder clearMyvar1() {
      myvar1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'myvar2' field.
      * @return The value.
      */
    public java.lang.Boolean getMyvar2() {
      return myvar2;
    }

    /**
      * Sets the value of the 'myvar2' field.
      * @param value The value of 'myvar2'.
      * @return This builder.
      */
    public com.dj.model.avro.SmallConsumerObjectAvro.Builder setMyvar2(java.lang.Boolean value) {
      validate(fields()[1], value);
      this.myvar2 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'myvar2' field has been set.
      * @return True if the 'myvar2' field has been set, false otherwise.
      */
    public boolean hasMyvar2() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'myvar2' field.
      * @return This builder.
      */
    public com.dj.model.avro.SmallConsumerObjectAvro.Builder clearMyvar2() {
      myvar2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'myvar3' field.
      * @return The value.
      */
    public java.lang.Double getMyvar3() {
      return myvar3;
    }

    /**
      * Sets the value of the 'myvar3' field.
      * @param value The value of 'myvar3'.
      * @return This builder.
      */
    public com.dj.model.avro.SmallConsumerObjectAvro.Builder setMyvar3(java.lang.Double value) {
      validate(fields()[2], value);
      this.myvar3 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'myvar3' field has been set.
      * @return True if the 'myvar3' field has been set, false otherwise.
      */
    public boolean hasMyvar3() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'myvar3' field.
      * @return This builder.
      */
    public com.dj.model.avro.SmallConsumerObjectAvro.Builder clearMyvar3() {
      myvar3 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SmallConsumerObjectAvro build() {
      try {
        SmallConsumerObjectAvro record = new SmallConsumerObjectAvro();
        record.myvar1 = fieldSetFlags()[0] ? this.myvar1 : (java.lang.Integer) defaultValue(fields()[0]);
        record.myvar2 = fieldSetFlags()[1] ? this.myvar2 : (java.lang.Boolean) defaultValue(fields()[1]);
        record.myvar3 = fieldSetFlags()[2] ? this.myvar3 : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SmallConsumerObjectAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<SmallConsumerObjectAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SmallConsumerObjectAvro>
    READER$ = (org.apache.avro.io.DatumReader<SmallConsumerObjectAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
