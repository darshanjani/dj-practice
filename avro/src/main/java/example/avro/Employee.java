/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package example.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Employee extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5477446736469858006L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Employee\",\"namespace\":\"example.avro\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"active\",\"type\":\"boolean\"},{\"name\":\"sid\",\"type\":\"int\"},{\"name\":\"ssn\",\"type\":\"long\"},{\"name\":\"salary\",\"type\":\"double\"},{\"name\":\"increment\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Employee> ENCODER =
      new BinaryMessageEncoder<Employee>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Employee> DECODER =
      new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Employee> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Employee> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Employee to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Employee from a ByteBuffer. */
  public static Employee fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence name;
   private boolean active;
   private int sid;
   private long ssn;
   private double salary;
   private float increment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Employee() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param active The new value for active
   * @param sid The new value for sid
   * @param ssn The new value for ssn
   * @param salary The new value for salary
   * @param increment The new value for increment
   */
  public Employee(java.lang.CharSequence name, java.lang.Boolean active, java.lang.Integer sid, java.lang.Long ssn, java.lang.Double salary, java.lang.Float increment) {
    this.name = name;
    this.active = active;
    this.sid = sid;
    this.ssn = ssn;
    this.salary = salary;
    this.increment = increment;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return active;
    case 2: return sid;
    case 3: return ssn;
    case 4: return salary;
    case 5: return increment;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: active = (java.lang.Boolean)value$; break;
    case 2: sid = (java.lang.Integer)value$; break;
    case 3: ssn = (java.lang.Long)value$; break;
    case 4: salary = (java.lang.Double)value$; break;
    case 5: increment = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'active' field.
   * @return The value of the 'active' field.
   */
  public java.lang.Boolean getActive() {
    return active;
  }

  /**
   * Sets the value of the 'active' field.
   * @param value the value to set.
   */
  public void setActive(java.lang.Boolean value) {
    this.active = value;
  }

  /**
   * Gets the value of the 'sid' field.
   * @return The value of the 'sid' field.
   */
  public java.lang.Integer getSid() {
    return sid;
  }

  /**
   * Sets the value of the 'sid' field.
   * @param value the value to set.
   */
  public void setSid(java.lang.Integer value) {
    this.sid = value;
  }

  /**
   * Gets the value of the 'ssn' field.
   * @return The value of the 'ssn' field.
   */
  public java.lang.Long getSsn() {
    return ssn;
  }

  /**
   * Sets the value of the 'ssn' field.
   * @param value the value to set.
   */
  public void setSsn(java.lang.Long value) {
    this.ssn = value;
  }

  /**
   * Gets the value of the 'salary' field.
   * @return The value of the 'salary' field.
   */
  public java.lang.Double getSalary() {
    return salary;
  }

  /**
   * Sets the value of the 'salary' field.
   * @param value the value to set.
   */
  public void setSalary(java.lang.Double value) {
    this.salary = value;
  }

  /**
   * Gets the value of the 'increment' field.
   * @return The value of the 'increment' field.
   */
  public java.lang.Float getIncrement() {
    return increment;
  }

  /**
   * Sets the value of the 'increment' field.
   * @param value the value to set.
   */
  public void setIncrement(java.lang.Float value) {
    this.increment = value;
  }

  /**
   * Creates a new Employee RecordBuilder.
   * @return A new Employee RecordBuilder
   */
  public static example.avro.Employee.Builder newBuilder() {
    return new example.avro.Employee.Builder();
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Employee RecordBuilder
   */
  public static example.avro.Employee.Builder newBuilder(example.avro.Employee.Builder other) {
    return new example.avro.Employee.Builder(other);
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Employee instance.
   * @param other The existing instance to copy.
   * @return A new Employee RecordBuilder
   */
  public static example.avro.Employee.Builder newBuilder(example.avro.Employee other) {
    return new example.avro.Employee.Builder(other);
  }

  /**
   * RecordBuilder for Employee instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Employee>
    implements org.apache.avro.data.RecordBuilder<Employee> {

    private java.lang.CharSequence name;
    private boolean active;
    private int sid;
    private long ssn;
    private double salary;
    private float increment;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(example.avro.Employee.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.active)) {
        this.active = data().deepCopy(fields()[1].schema(), other.active);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sid)) {
        this.sid = data().deepCopy(fields()[2].schema(), other.sid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ssn)) {
        this.ssn = data().deepCopy(fields()[3].schema(), other.ssn);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.salary)) {
        this.salary = data().deepCopy(fields()[4].schema(), other.salary);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.increment)) {
        this.increment = data().deepCopy(fields()[5].schema(), other.increment);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Employee instance
     * @param other The existing instance to copy.
     */
    private Builder(example.avro.Employee other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.active)) {
        this.active = data().deepCopy(fields()[1].schema(), other.active);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sid)) {
        this.sid = data().deepCopy(fields()[2].schema(), other.sid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ssn)) {
        this.ssn = data().deepCopy(fields()[3].schema(), other.ssn);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.salary)) {
        this.salary = data().deepCopy(fields()[4].schema(), other.salary);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.increment)) {
        this.increment = data().deepCopy(fields()[5].schema(), other.increment);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public example.avro.Employee.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public example.avro.Employee.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'active' field.
      * @return The value.
      */
    public java.lang.Boolean getActive() {
      return active;
    }

    /**
      * Sets the value of the 'active' field.
      * @param value The value of 'active'.
      * @return This builder.
      */
    public example.avro.Employee.Builder setActive(boolean value) {
      validate(fields()[1], value);
      this.active = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'active' field has been set.
      * @return True if the 'active' field has been set, false otherwise.
      */
    public boolean hasActive() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'active' field.
      * @return This builder.
      */
    public example.avro.Employee.Builder clearActive() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sid' field.
      * @return The value.
      */
    public java.lang.Integer getSid() {
      return sid;
    }

    /**
      * Sets the value of the 'sid' field.
      * @param value The value of 'sid'.
      * @return This builder.
      */
    public example.avro.Employee.Builder setSid(int value) {
      validate(fields()[2], value);
      this.sid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sid' field has been set.
      * @return True if the 'sid' field has been set, false otherwise.
      */
    public boolean hasSid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sid' field.
      * @return This builder.
      */
    public example.avro.Employee.Builder clearSid() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ssn' field.
      * @return The value.
      */
    public java.lang.Long getSsn() {
      return ssn;
    }

    /**
      * Sets the value of the 'ssn' field.
      * @param value The value of 'ssn'.
      * @return This builder.
      */
    public example.avro.Employee.Builder setSsn(long value) {
      validate(fields()[3], value);
      this.ssn = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ssn' field has been set.
      * @return True if the 'ssn' field has been set, false otherwise.
      */
    public boolean hasSsn() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ssn' field.
      * @return This builder.
      */
    public example.avro.Employee.Builder clearSsn() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'salary' field.
      * @return The value.
      */
    public java.lang.Double getSalary() {
      return salary;
    }

    /**
      * Sets the value of the 'salary' field.
      * @param value The value of 'salary'.
      * @return This builder.
      */
    public example.avro.Employee.Builder setSalary(double value) {
      validate(fields()[4], value);
      this.salary = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'salary' field has been set.
      * @return True if the 'salary' field has been set, false otherwise.
      */
    public boolean hasSalary() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'salary' field.
      * @return This builder.
      */
    public example.avro.Employee.Builder clearSalary() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'increment' field.
      * @return The value.
      */
    public java.lang.Float getIncrement() {
      return increment;
    }

    /**
      * Sets the value of the 'increment' field.
      * @param value The value of 'increment'.
      * @return This builder.
      */
    public example.avro.Employee.Builder setIncrement(float value) {
      validate(fields()[5], value);
      this.increment = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'increment' field has been set.
      * @return True if the 'increment' field has been set, false otherwise.
      */
    public boolean hasIncrement() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'increment' field.
      * @return This builder.
      */
    public example.avro.Employee.Builder clearIncrement() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Employee build() {
      try {
        Employee record = new Employee();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.active = fieldSetFlags()[1] ? this.active : (java.lang.Boolean) defaultValue(fields()[1]);
        record.sid = fieldSetFlags()[2] ? this.sid : (java.lang.Integer) defaultValue(fields()[2]);
        record.ssn = fieldSetFlags()[3] ? this.ssn : (java.lang.Long) defaultValue(fields()[3]);
        record.salary = fieldSetFlags()[4] ? this.salary : (java.lang.Double) defaultValue(fields()[4]);
        record.increment = fieldSetFlags()[5] ? this.increment : (java.lang.Float) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Employee>
    WRITER$ = (org.apache.avro.io.DatumWriter<Employee>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Employee>
    READER$ = (org.apache.avro.io.DatumReader<Employee>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
